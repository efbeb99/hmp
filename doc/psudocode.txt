
/*
 * build cell:
 *
 * # bounds=[l_1, u_1, l_2, u_2, ..., l_d, u_d]
 * # building a quad-tree
 *
 * cell::get_children():
 * # suppose lower bounds of cell is vl, upper bound is vu
 * # |vl|_1<1, |vu|_1>1, vu_i=vl_i+0.5^curLevel
 * # then u>|vl|_1>l
 * 1. u=1 # lower bound of L1 norm of [lower bounds of cell]
 * 2. l=1-pow(0.5, cur_level)*dim # lower bound of L1 norm of [lower bounds of cell]
 * 3. for vl of all_case_of_vl: # there will be 2^dim cases of vl, check each one
 * 4. if u>sum(vl) and sum(vl)>l: # test vl whether satisfy u>|vl|_1>l
 * 5.    box=gen_box(vl)
 * 6.    child=cell(box, curLevel+1)
 * 7.    this.children.add(child)
 *
 * cell::get_vertexes():
 * # upper_num=(1-sum(lower_bounds))/(0.5^curLevel)
 * # there are combination number C(dim, upper_num) vertexes
 * # from dim dimension, select upper_num attributes and make them equals to upper bound of the cell
 * # the others dim-upper_num attributes equals lower bound of the cell
 * 1. for uas in select_upperNum_attributes_from_dimAttr:
 * 2.     upper_num=(1-sum(lower_bounds))/(0.5^curLevel)
 * 3.     v=[]
 * 4.     for i in range(0, dim):
 * 5.         if i in uas:
 * 6.             v.add(this.upper_bounds[i])
 * 7.         else:
 * 8.             v.add(this.lower_bounds[i])
 * 9.     this.vertexes.add(v)
 */


/*
 * baseline:
 *     for each cell, calculate r-kskyband
 *
 */


/*
 * CSA:
 * # pre build the quad-tree and don't count for time
 * # each cell maintains a "dominated" count array
 * CSA():
 * 1. kskyband, BBS (option dataset P_0-->P)
 * 2. for i in range(len(P)):       # r-dominate test and count r-dominate
 * 3.     for j in range(i+1, len(P)):
 * 4.         root.CSA_insert(i, j, P)
 * 5. for left_c in all_leaf_cell:  # update RKS
 * 6.     for i in range(len(P)):
 * 7.         if left_c.dmc[i]<k:
 * 8.             left_c.rkskyband.add(i)
 *
 * cell::CSA_insert(i, j, P):
 * 1. if this.dmc[i]>=k or this.dmc[j]>=k:
 * 2.     return
 * 3. if this.rdominate(P[i], P[j]):
 * 4.     this.recursively_update_dmc(j)
 * 5. elif this.rdominate(P[j], P[i]):
 * 6.     this.recursively_update_dmc(i)
 * 7. else:
 * 8.     for child in this.children:
 * 9.         child.CSA_insert(i, j, P)
 *
 * cell::recursively_update_dmc(i):
 * 1. if this.dmc[i]<k:
 * 2.     this.dmc[i]+=1
 * 3.     for child in this.children:
 * 4.         child.recursively_update_dmc(i)
 */


/*
 * MDA
 * # for an option p in cell c, UB and LB only calculate for once
 * # insert option by option
 * # maintain a super set of RKS rather than exact RKS
 *
 * # first calculate UB(p)
 * # check relationship between UB(p) and k-th largest LB(p_i)
 * # prune p or calculate LB(p)
 * # after insert all options, tighten superset of RKS with UB(p) and current k-th largest LB(p_i)
 * #
 *
 * MDA():
 * 1. for id in kskyband:
 * 2.     root.MDA_insert(id)
 * 3. for leaf in all_leaves:
 * 4.     leaf.superSet2RKS()   # OPTION 1 or OPTION 2
 *
 * cell::MDA_insert(id, P)
 * 1. theta=this.heap.top()  # a min heap with size k and initialized with 0
 * 2. lb, ub=this.bound(id)  # finding minimal and maximal share the same execution
 * 3. if ub>theta:          # may be one of r-k-skyband
 * 4.     if lb>=theta:
 * 5.         this.heap.push(lb)
 * 6.         this.heap.pop()
 * 7.     if this.isLeaf():
 * 8.         this.s_rkskyband.add([id, lb, ub])
 * 9.     else:
 * 10.        for child in this.children:
 * 11.            child.MDA_insert(id, P)
 *
 * cell::superSet2RKS()
 * # sort sRKS by decreasing UB order, (sRKS-->sRKS')
 * # test r-dominate
 * 1. RKS=sRKS'[0:k] # include 0-th but not k-th
 * 2. scores=[]
 * 3. for id in RKS:
 * 4.     scores.add(this.get_scores(P[i]))
 * 5. for i in range(k, sRKS'.size()):
 * 6.     r_dominate_count=0
 * 7.     p1=sRKS'[i]
 * 8.     s=this.get_scores(P[p1])
 * 9.     for j in range(0, RKS.size()):
 * 10.        p2=RKS[j]
 * 11.        if lb[p1]<lb[p2]:      # a pruning
 * 12.            if rdominate_by_scores(scores[p2], s):  # to reduce the duplicate computations of scores
 * 13.                r_dominate_count+=1
 * 14.                if r_dominate_count>=k: # a pruning, not necessary continue
 * 15.                    break
 * 16.    if r_dominate_count<k:
 * 17.        RKS.add(p1)
 * 18.        scores.add(s)
 *
 * rdominate_by_scores(s1, s2):
 * 1. for i, j in (s1, s2):
 * 2.     if i<j:
 * 3.         return False
 * 4. return True   # we assume there will be no 2 options are exactly the same
 *
 */

 /*
  * MDA+
  *
  * MDAp():
  * 1. for id in kskyband:
  * 2.     root.MDAp_insert(id)
  * 3. for leaf in all_leaves:
  * 4.     leaf.superSet2RKS()   # OPTION 1 or OPTION 2
  *
  * cell::MDAp_insert(parent_sRSK, P)
  * 1. lbs, ubs=this.get_lu_scores(parent_sRSK)
  * 2. theta=the k-th largest lb in lbs
  * 3. for id in parent_sRSK:
  * 4.     if ubs[id]>theta:
  * 5.         this.MDAp_sRSK.add(id)
  * 6. for child in this.children:
  * 7.     child.MDAp_insert(this.MDAp_sRSK, P)
  *
  */

